apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: python-fastapi-postgres-crud-template
  title: Python fastAPI Postgres CRUD template
  description: Provisions a minimalistic flask application
spec:
  owner: development
  type: service

  parameters:
    - title: Details of the Service
      required:
        - component_id
        - description
        - environment
        - num_containers
      properties:
        component_id:
          title: Component name
          type: string
          description: Provide a component (microservice) name
          pattern: '^([a-z][a-z0-9]*)(-[a-z0-9]+)*$'
        description:
          title: Description
          type: string
          default: <Enter a brief description>
          description: Short description of the service
        environment:
          title: Environment
          type: string
          default: dev
          description: The environment where this component will be deployed
          enum:
            - dev
            - prod          
        num_containers:
          title: Number of Starting Containers
          type: integer
          description: The number of containers to start with
          default: 1
          minimum: 1
          maximum: 10            
  uiSchema:
    description:
      'ui:widget': textarea
  steps:
    - id: fetch-base
      name: Fetch Base
      action: fetch:template
      input:
        url: ./template
        values:
          app_name: ${{parameters.component_id}}
          app_description: ${{parameters.description}}
          app_env: ${{parameters.environment}}          
          app_containers: ${{parameters.num_containers}}

    - id: publish
      name: Publish
      action: publish:github
      input:
        description: This is ${{ parameters.component_id }}
        repoUrl: github.com?owner=jaysuzi5-organization&repo=${{parameters.component_id}}
        protectDefaultBranch: false
        repoVisibility: public

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
        catalogInfoPath: "/catalog-info.yaml"

  output:
    links:
      - title: Repository
        url: ${{ steps['publish'].output.remoteUrl }}
